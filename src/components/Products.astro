---
const features = [
  {
    icon: "ï¿½",
    title: "Personalized and Tailored Paths",
    description:
      "Say goodbye to one-size-fits-all: MemhirET analyzes your strengths and weaknesses, building a personalized blueprint for your learning journey.",
  },
  {
    icon: "ðŸ’¡",
    title: "Comprehensive Ecosystem",
    description:
      "A complete educational ecosystem that brings together students, schools, and parents in a collaborative environment for enhanced learning outcomes.",
  },
  {
    icon: "ðŸ§ ",
    title: "Lifelong Learning Journey",
    description:
      "From middle school through college and beyond, MemhirET provides intuitive learning experiences and career guidance at every educational milestone.",
  },
];
---

<div class="w-full min-h-screen flex items-center justify-center scroll-mt-24">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
    <div class="flex flex-col items-center text-center space-y-8 mb-24">
      <p
        class="font-body font-medium tracking-wide text-sm uppercase rounded-md px-4 py-1.5 bg-gray-300 text-memhirETBlue-500"
      >
        Our Platform
      </p>
      <h2
        class="text-4xl md:text-5xl lg:text-6xl font-bauhaus font-bold text-memhirETWhite-500 max-w-3xl leading-tight [font-feature-settings:'ss01'_on,'ss02'_on] [-webkit-letter-spacing:-0.02em]"
      >
        Personalized Learning Experience
      </h2>
      <p
        class="font-body text-lg md:text-xl text-memhirETWhite-500/90 max-w-2xl leading-relaxed"
      >
        Leveraging data-driven insights and proven learning science, MemhirET
        provides a personalized learning experience.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
      {
        features.map((feature, index) => (
          <div class="feature-container opacity-0">
            <div class="group bg-memhirETWhite-500/5 backdrop-blur-sm rounded-2xl p-8 hover:bg-memhirETWhite-500/10 transition-all duration-300 hover:-translate-y-1 border border-white/10 hover:border-white/20 hover:shadow-lg">
              <div class="feature-content opacity-0 space-y-6 transition-transform duration-300 group-hover:-translate-y-0.5">
                <div class="w-12 h-12 rounded-xl bg-memhirETBlue-500/20 flex items-center justify-center">
                  <span class="text-memhirETWhite-500 text-2xl">
                    {feature.icon}
                  </span>
                </div>
                <h3 class="text-xl font-display font-semibold text-memhirETWhite-500">
                  {feature.title}
                </h3>
                <p class="font-body text-memhirETWhite-500/80 leading-relaxed group-hover:opacity-100 transition-opacity duration-300">
                  {feature.description}
                </p>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<style>
  html {
    scroll-behavior: smooth;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInRight {
    from {
      opacity: 0;
      transform: translateX(20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<script>
  const observerOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.1,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const container = entry.target;
        const content = container.querySelector(".feature-content");
        (container as HTMLElement).style.animation =
          "fadeInUp 0.6s ease-out forwards";
        if (content) {
          (content as HTMLElement).style.animation =
            "fadeInLeft 0.6s ease-out 0.2s forwards";
        }
      }
    });
  }, observerOptions);

  document.querySelectorAll(".feature-container").forEach((container) => {
    observer.observe(container);
  });
</script>
