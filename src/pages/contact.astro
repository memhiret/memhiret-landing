---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/NavBar.astro";
import Footer from "../components/Footer.astro";

const pageTitle = "MemhirET - Contact Us";
const pageDescription = "Get in touch with us for any inquiries or support";
---

<Layout title={pageTitle} description={pageDescription}>
  <Navbar />
  <div class="w-full flex flex-col items-center justify-center pt-24 md:pt-32">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="text-center mb-12">
        <h1
          class="font-bauhaus font-semibold text-3xl lg:text-4xl xl:text-6xl text-white mb-6"
        >
          Get in <span class="bg-memhirETBlue-500 px-4 py-2 rounded-md"
            >Touch</span
          >
        </h1>
        <p class="font-body text-sm xl:text-lg text-gray-400 max-w-2xl mx-auto">
          Have questions or want to learn more? We'd love to hear from you.
        </p>
      </div>

      <form class="space-y-6 bg-white/5 p-8 rounded-lg border border-white/10">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label
              for="firstname"
              class="block text-sm font-body text-gray-400 mb-2"
              >First Name</label
            >
            <input
              type="text"
              id="firstname"
              name="firstname"
              required
              minlength="2"
              maxlength="24"
              pattern="^[A-Za-z\s]{2,24}$"
              class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:border-memhirETBlue-500 text-white"
            />
            <span class="hidden text-red-500 text-sm mt-1 firstname-error"
            ></span>
          </div>
          <div>
            <label
              for="lastname"
              class="block text-sm font-body text-gray-400 mb-2"
              >Last Name</label
            >
            <input
              type="text"
              id="lastname"
              name="lastname"
              required
              minlength="2"
              maxlength="24"
              pattern="^[A-Za-z\s]{2,24}$"
              class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:border-memhirETBlue-500 text-white"
            />
            <span class="hidden text-red-500 text-sm mt-1 lastname-error"
            ></span>
          </div>
        </div>

        <div>
          <label for="email" class="block text-sm font-body text-gray-400 mb-2"
            >Email Address</label
          >
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:border-memhirETBlue-500 text-white"
          />
          <span class="hidden text-red-500 text-sm mt-1 email-error"></span>
        </div>

        <div>
          <label
            for="organization"
            class="block text-sm font-body text-gray-400 mb-2"
            >School/Organization
          </label>
          <input
            type="text"
            id="organization"
            name="organization"
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:border-memhirETBlue-500 text-white"
          />
        </div>

        <div class="flex justify-center">
          <button
            type="submit"
            class="px-12 py-4 bg-memhirETBlue-500 text-white font-body rounded-lg hover:bg-memhirETBlue-700 transition-all text-base disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          >
            <span class="submit-text">Send Message</span>
            <span class="loading-spinner hidden">
              <svg
                class="animate-spin h-5 w-5"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </span>
          </button>
        </div>
      </form>
    </div>
  </div>
  <Footer />
</Layout>

<script>
  const form = document.querySelector("form");
  const submitButton = form?.querySelector('button[type="submit"]');
  const submitText = submitButton?.querySelector(".submit-text");
  const loadingSpinner = submitButton?.querySelector(".loading-spinner");

  function validateName(value: string): { isValid: boolean; message: string } {
    const trimmed = value.trim();
    if (trimmed.length < 2) {
      return {
        isValid: false,
        message: "Name must be at least 2 characters long",
      };
    }
    if (trimmed.length > 24) {
      return { isValid: false, message: "Name must not exceed 24 characters" };
    }
    if (!/^[A-Za-z\s]{2,24}$/.test(trimmed)) {
      return {
        isValid: false,
        message: "Name can only contain letters and spaces",
      };
    }
    return { isValid: true, message: "" };
  }

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target as HTMLFormElement);
    const firstname = formData.get("firstname") as string;
    const lastname = formData.get("lastname") as string;
    const email = formData.get("email") as string;
    const organization = formData.get("organization") as string;

    const firstnameValidation = validateName(firstname);
    const lastnameValidation = validateName(lastname);

    if (!firstnameValidation.isValid || !lastnameValidation.isValid) {
      return;
    }

    if (submitButton && submitText && loadingSpinner) {
      (submitButton as HTMLButtonElement).disabled = true;
      submitText.textContent = "Sending...";
      loadingSpinner.classList.remove("hidden");
    }

    try {
      const response = await fetch("https://submit-form.com/tZXD6hvP3", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({
          firstname: firstname.trim(),
          lastname: lastname.trim(),
          email,
          organization,
        }),
      });

      if (response.ok) {
        alert("Thank you for your message! We'll get back to you soon.");
        (e.target as HTMLFormElement).reset();
      } else {
        alert("Failed to send message. Please try again.");
      }
    } catch (error) {
      alert("Error occurred: " + error);
    } finally {
      if (submitButton && submitText && loadingSpinner) {
        (submitButton as HTMLButtonElement).disabled = false;
        submitText.textContent = "Send Message";
        loadingSpinner.classList.add("hidden");
      }
    }
  });
</script>
